{"version":3,"sources":["components/nav.js","components/search.js","components/content.js","utils/history.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["Nav","t","useTranslation","i18n","changeLang","e","changeLanguage","className","src","to","DropdownButton","id","title","variant","Dropdown","Item","eventKey","onSelect","Search","type","placeholder","value","Content","history","createBrowserHistory","App","Boolean","window","location","hostname","match","resources","en","translation","cn","use","initReactI18next","init","lng","fallbackLng","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wnBA+BeA,MAxBf,WAAe,IACHC,EAAMC,cAAND,EACAE,EAASD,cAATC,KACR,SAASC,EAAWC,GAClBF,EAAKG,eAAeD,GAEtB,OACI,4BAAQE,UAAU,mCAChB,yBAAKC,IAAI,YAAYD,UAAU,OAC/B,yBAAKA,UAAU,2BACX,kBAAC,IAAD,CAAME,GAAG,IAAIF,UAAU,yEAAyEN,EAAE,SAClG,kBAAC,IAAD,CAAMQ,GAAG,gBAAgBF,UAAU,yEAAyEN,EAAE,UAC9G,kBAAC,IAAD,CAAMQ,GAAG,gBAAgBF,UAAU,yEAAyEN,EAAE,YAC9G,kBAAC,IAAD,CAAMQ,GAAG,SAASF,UAAU,yEAAyEN,EAAE,UACvG,kBAAC,IAAD,CAAMQ,GAAG,WAAWF,UAAU,yEAAyEN,EAAE,aACzG,kBAACS,EAAA,EAAD,CAAgBC,GAAG,wBAAwBC,MAAOX,EAAE,YAAaM,UAAU,KAAKM,QAAQ,SACtF,kBAACC,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAKC,SAAUb,GAAvC,WACA,kBAACU,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAKC,SAAUb,GAAvC,eCHDc,MAlBf,WACI,OACI,yBAAKX,UAAU,SACX,0BAAMA,UAAU,gDACZ,8BAAUA,UAAU,iBACpB,4BAAQA,UAAU,6BAAlB,oBACI,yBAAKA,UAAU,MACX,2BAAOA,UAAU,2DAA2DY,KAAK,SAASC,YAAY,UACtG,2BAAOb,UAAU,2DAA2DY,KAAK,OAAOC,YAAY,cACpG,uBAAGb,UAAU,OAAb,WACA,2BAAOA,UAAU,2DAA2DY,KAAK,OAAOC,YAAY,YACpG,2BAAOb,UAAU,uFAAuFY,KAAK,SAASE,MAAM,gBCJrIC,MAPf,WACI,OACI,yBAAKf,UAAU,SACX,yBAAKC,IAAI,mB,OCLRe,EAAUC,cCoBRC,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,CAAQgB,QAASA,GACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCZAC,EAAY,CAChBC,GAAI,CACFC,Y,OAEFC,GAAI,CACFD,Y,QAIJ9B,IAAKgC,IAAIC,KAAkBC,KAAK,CAC9BN,YACAO,IAAK,KACLC,YAAa,KACbC,cAAe,CACbC,aAAa,KAIFtC,EAAf,E,MCjBAuC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e2b085c.chunk.js","sourcesContent":["import { useTranslation } from 'react-i18next';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport React from 'react';\nimport {\n    Link,\n  } from \"react-router-dom\";\nfunction Nav(){\n    const { t } = useTranslation();\n    const { i18n } = useTranslation();\n    function changeLang(e){\n      i18n.changeLanguage(e);\n    }\n    return(\n        <header className=\"bg-white black-80 tc pv4 avenir\">\n          <img src=\"/logo.png\" className=\"h2\"></img>\n          <nav className=\"bt bb tc mw8 center mt4\">\n              <Link to=\"/\" className=\"f6 f5-l link bg-animate black-80 hover-bg-lightest-blue dib pa3 ph4-l\">{t('home')}</Link>\n              <Link to=\"/itemCardList\" className=\"f6 f5-l link bg-animate black-80 hover-bg-lightest-blue dib pa3 ph4-l\">{t('about')}</Link>\n              <Link to=\"/itemCardList\" className=\"f6 f5-l link bg-animate black-80 hover-bg-lightest-blue dib pa3 ph4-l\">{t('contact')}</Link>\n              <Link to=\"/about\" className=\"f6 f5-l link bg-animate black-80 hover-bg-lightest-blue dib pa3 ph4-l\">{t('login')}</Link>\n              <Link to=\"/Contact\" className=\"f6 f5-l link bg-animate black-80 hover-bg-lightest-blue dib pa3 ph4-l\">{t('register')}</Link>\n              <DropdownButton id=\"dropdown-basic-button\" title={t('language')} className=\"di\" variant=\"light\">\n                <Dropdown.Item eventKey=\"en\" onSelect={changeLang}>English</Dropdown.Item>\n                <Dropdown.Item eventKey=\"cn\" onSelect={changeLang}>Chinese</Dropdown.Item>\n              </DropdownButton>\n          </nav>\n      </header>\n    );\n}\n\nexport default Nav;\n","\nimport React from 'react';\n\nfunction Search(){\n    return (\n        <div className=\"pa4-l\">\n            <form className=\"bg-light-gray mw10 pa4 br2-ns ba b--black-10\">\n                <fieldset className=\"cf bn ma0 pa0\">\n                <legend className=\"pa0 f5 f4-ns mb3 black-80\">Search your room</legend>\n                    <div className=\"cf\">\n                        <input className=\"dib f5 ma2 input-reset ba b--black-20 pv3 ph4 border-box\" type=\"search\" placeholder=\"place\" ></input>\n                        <input className=\"dib f5 ma2 input-reset ba b--black-20 pv3 ph4 border-box\" type=\"date\" placeholder=\"from date\"></input>\n                        <p className=\"dib\">to &nbsp;</p>\n                        <input className=\"dib f5 ma2 input-reset ba b--black-20 pv3 ph4 border-box\" type=\"date\" placeholder=\"to date\"></input>\n                        <input className=\"dib input-reset bg-black-80 white f5 pv2 pv3-ns ph4 ba b--black-80 bg-hover-mid-gray\" type=\"submit\" value=\"Submit\"></input>\n                    </div>\n                </fieldset>\n            </form>\n        </div>\n    );\n}\nexport default Search;\n","\nimport React from 'react';\n\nfunction Content(){\n    return (\n        <div className=\"pa4-l\">\n            <img src=\"/poster1.png\"></img>\n        </div>\n    );\n}\nexport default Content;\n","import { createBrowserHistory } from 'history';\nexport const history = createBrowserHistory();","import React from 'react';\nimport './App.css';\nimport Nav from './components/nav'\nimport Search from './components/search'\nimport Content from './components/content'\nimport { history } from './utils/history';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history} >\n        <Nav/> \n        <Content/>\n        <Search/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from 'react-i18next';\nimport en from './assets/en-lang.json';\nimport cn from './assets/cn-lang.json';\n\nconst resources = {\n  en: {\n    translation: en,\n  },\n  cn: {\n    translation: cn,\n  }\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: 'en',             //預設語言\n  fallbackLng: 'cn',     //如果當前切換的語言沒有對應的翻譯則使用這個語言，\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './i18n';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}